# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import lab_pb2 as lab_dot_lab__pb2


class LabControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLabByRegistrationNumber = channel.unary_unary(
                '/lab.LabController/GetLabByRegistrationNumber',
                request_serializer=lab_dot_lab__pb2.RegNumberRequest.SerializeToString,
                response_deserializer=lab_dot_lab__pb2.Lab.FromString,
                )
        self.GetLabByLabName = channel.unary_unary(
                '/lab.LabController/GetLabByLabName',
                request_serializer=lab_dot_lab__pb2.LabNameRequest.SerializeToString,
                response_deserializer=lab_dot_lab__pb2.Lab.FromString,
                )


class LabControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLabByRegistrationNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabByLabName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LabControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLabByRegistrationNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabByRegistrationNumber,
                    request_deserializer=lab_dot_lab__pb2.RegNumberRequest.FromString,
                    response_serializer=lab_dot_lab__pb2.Lab.SerializeToString,
            ),
            'GetLabByLabName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabByLabName,
                    request_deserializer=lab_dot_lab__pb2.LabNameRequest.FromString,
                    response_serializer=lab_dot_lab__pb2.Lab.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lab.LabController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LabController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLabByRegistrationNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lab.LabController/GetLabByRegistrationNumber',
            lab_dot_lab__pb2.RegNumberRequest.SerializeToString,
            lab_dot_lab__pb2.Lab.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabByLabName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/lab.LabController/GetLabByLabName',
            lab_dot_lab__pb2.LabNameRequest.SerializeToString,
            lab_dot_lab__pb2.Lab.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
