# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import user_profile_pb2 as userprofile__proto_dot_user__profile__pb2


class UserProfileControllerStub(object):
    """import "google/protobuf/empty.proto";

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveUserProfile = channel.unary_unary(
                '/user_profile.UserProfileController/RetrieveUserProfile',
                request_serializer=userprofile__proto_dot_user__profile__pb2.UserProfileRetrieveRequest.SerializeToString,
                response_deserializer=userprofile__proto_dot_user__profile__pb2.UserProfile.FromString,
                )
        self.RetrieveUserLab = channel.unary_unary(
                '/user_profile.UserProfileController/RetrieveUserLab',
                request_serializer=userprofile__proto_dot_user__profile__pb2.UserProfileLabRetrieveRequest.SerializeToString,
                response_deserializer=userprofile__proto_dot_user__profile__pb2.Lab.FromString,
                )
        self.RetrieveLab = channel.unary_unary(
                '/user_profile.UserProfileController/RetrieveLab',
                request_serializer=userprofile__proto_dot_user__profile__pb2.LabRetrieveRequest.SerializeToString,
                response_deserializer=userprofile__proto_dot_user__profile__pb2.Lab.FromString,
                )


class UserProfileControllerServicer(object):
    """import "google/protobuf/empty.proto";

    """

    def RetrieveUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveUserLab(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveLab(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserProfileControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RetrieveUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveUserProfile,
                    request_deserializer=userprofile__proto_dot_user__profile__pb2.UserProfileRetrieveRequest.FromString,
                    response_serializer=userprofile__proto_dot_user__profile__pb2.UserProfile.SerializeToString,
            ),
            'RetrieveUserLab': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveUserLab,
                    request_deserializer=userprofile__proto_dot_user__profile__pb2.UserProfileLabRetrieveRequest.FromString,
                    response_serializer=userprofile__proto_dot_user__profile__pb2.Lab.SerializeToString,
            ),
            'RetrieveLab': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveLab,
                    request_deserializer=userprofile__proto_dot_user__profile__pb2.LabRetrieveRequest.FromString,
                    response_serializer=userprofile__proto_dot_user__profile__pb2.Lab.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user_profile.UserProfileController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserProfileController(object):
    """import "google/protobuf/empty.proto";

    """

    @staticmethod
    def RetrieveUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_profile.UserProfileController/RetrieveUserProfile',
            userprofile__proto_dot_user__profile__pb2.UserProfileRetrieveRequest.SerializeToString,
            userprofile__proto_dot_user__profile__pb2.UserProfile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveUserLab(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_profile.UserProfileController/RetrieveUserLab',
            userprofile__proto_dot_user__profile__pb2.UserProfileLabRetrieveRequest.SerializeToString,
            userprofile__proto_dot_user__profile__pb2.Lab.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveLab(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_profile.UserProfileController/RetrieveLab',
            userprofile__proto_dot_user__profile__pb2.LabRetrieveRequest.SerializeToString,
            userprofile__proto_dot_user__profile__pb2.Lab.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
